<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/springonly/backend/resource/LoanResource.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springonly/backend/resource/LoanResource.java" />
              <option name="originalContent" value="package com.springonly.backend.resource;&#10;&#10;import com.springonly.backend.mapper.LoanMapper;&#10;import com.springonly.backend.model.dto.LoanDTO;&#10;import com.springonly.backend.model.request.CreateLoanRequest;&#10;import com.springonly.backend.model.request.UpdateLoanRequest;&#10;import com.springonly.backend.model.response.CreateLoanResponse;&#10;import com.springonly.backend.model.response.GetLoanByIdResponse;&#10;import com.springonly.backend.model.response.UpdateLoanResponse;&#10;import com.springonly.backend.model.response.generic.ErrorResponse;&#10;import com.springonly.backend.service.LoanService;&#10;import jakarta.inject.Inject;&#10;import jakarta.transaction.Transactional;&#10;import jakarta.ws.rs.*;&#10;import jakarta.ws.rs.core.MediaType;&#10;import jakarta.ws.rs.core.Response;&#10;import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;&#10;import org.eclipse.microprofile.openapi.annotations.media.Content;&#10;import org.eclipse.microprofile.openapi.annotations.media.ExampleObject;&#10;import org.eclipse.microprofile.openapi.annotations.media.Schema;&#10;import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;&#10;import org.eclipse.microprofile.openapi.annotations.Operation;&#10;&#10;import java.util.Optional;&#10;&#10;@Schema(&#10;    name = &quot;LoanResource&quot;,&#10;    description = &quot;&quot;&quot;&#10;        Handles loan-related operations such as:&#10;          - Creating new loans for customers&#10;          - Updating existing loans&#10;          - Retrieving loan details by ID&#10;        &quot;&quot;&quot;&#10;)&#10;@Path(&quot;/loans&quot;)&#10;@Produces(MediaType.APPLICATION_JSON)&#10;@Consumes(MediaType.APPLICATION_JSON)&#10;public class LoanResource {&#10;    @Inject&#10;    LoanService loanService;&#10;    &#10;    @Inject&#10;    LoanMapper loanMapper;&#10;    &#10;    @HeaderParam(&quot;X-RelationshipManager-Id&quot;)&#10;    String headerRelationshipManagerId;&#10;    &#10;    @POST&#10;    @Path(&quot;&quot;)&#10;    @Transactional&#10;    @Operation(&#10;        operationId = &quot;createLoan&quot;,&#10;        summary = &quot;Create a new loan&quot;,&#10;        description = &quot;Creates a loan for a customer. Requires a CreateLoanRequest payload with the necessary loan data.&quot;&#10;    )&#10;    @RequestBody(&#10;        description = &quot;CreateLoanRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = CreateLoanRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Create loan example&quot;,&#10;                    summary = &quot;Request to create a loan&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                      &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                      &quot;principalAmount&quot;: 10000.00,&#10;                      &quot;interestRate&quot;: 5.5,&#10;                      &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                      &quot;numberOfMonthlyPayments&quot;: 36&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;201&quot;,&#10;            description = &quot;Loan created successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = CreateLoanResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreateLoanResponse example&quot;,&#10;                        summary = &quot;Created loan representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                          &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                          &quot;principalAmount&quot;: 10000.00,&#10;                          &quot;interestRate&quot;: 5.5,&#10;                          &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                          &quot;numberOfMonthlyPayments&quot;: 36,&#10;                          &quot;loanStateId&quot;: &quot;VIGENTE&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-09-01T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;400&quot;,&#10;            description = &quot;Invalid request&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreateLoan error&quot;,&#10;                        summary = &quot;Invalid input example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;principalAmount must be greater than 0&quot;,&#10;                          &quot;code&quot;: &quot;INVALID_REQUEST&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response createLoan(&#10;        CreateLoanRequest request&#10;    ) {&#10;        // 1️⃣ Convertimos el request a DTO&#10;        LoanDTO fromRequestToDTO = loanMapper.fromCreateRequestToDTO(request);&#10;        &#10;        // 2️⃣ Llamamos al servicio para crear el préstamo&#10;        LoanDTO createdLoan = loanService.createLoan(fromRequestToDTO);&#10;        &#10;        // 3️⃣ Retornamos la respuesta con código 201 (CREATED)&#10;        return Response&#10;                .status(Response.Status.CREATED)&#10;                .entity(loanMapper.fromDTOToCreateResponse(createdLoan))&#10;                .build();&#10;    }&#10;    &#10;    @PATCH&#10;    @Path(&quot;/{loanId}&quot;)&#10;    @Transactional&#10;    @Operation(&#10;        operationId = &quot;updateLoan&quot;,&#10;        summary = &quot;Update an existing loan&quot;,&#10;        description = &quot;Updates loan fields for the given loanId using UpdateLoanRequest.&quot;&#10;    )&#10;    @RequestBody(&#10;        description = &quot;UpdateLoanRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = UpdateLoanRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Update loan example&quot;,&#10;                    summary = &quot;Request to update a loan state&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;loanStateId&quot;: &quot;ACTIVE&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Loan updated successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = UpdateLoanResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdateLoanResponse example&quot;,&#10;                        summary = &quot;Updated loan representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                          &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                          &quot;principalAmount&quot;: 10000.00,&#10;                          &quot;interestRate&quot;: 5.5,&#10;                          &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                          &quot;numberOfMonthlyPayments&quot;: 36,&#10;                          &quot;loanStateId&quot;: &quot;ACTIVE&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-01T09:30:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;400&quot;,&#10;            description = &quot;Invalid request&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdateLoan error&quot;,&#10;                        summary = &quot;Invalid update example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;Invalid update data&quot;,&#10;                          &quot;code&quot;: &quot;INVALID_UPDATE&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Loan not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdateLoan not found&quot;,&#10;                        summary = &quot;Loan to update was not found&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El préstamo indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;LN002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response updateLoan(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        UpdateLoanRequest request&#10;    ) {&#10;        // 1️⃣ Convertimos el request a DTO&#10;        LoanDTO fromRequestToDTO = loanMapper.fromUpdateRequestToDTO(request);&#10;        fromRequestToDTO.setLoanId(loanId);&#10;        &#10;        // 2️⃣ Intentamos actualizar el préstamo&#10;        Optional&lt;LoanDTO&gt; updated = loanService.updateLoan(fromRequestToDTO);&#10;        &#10;        // 3️⃣ Si no existe, retornamos 404&#10;        if (updated.isEmpty()) {&#10;            return Response&#10;                .status(Response.Status.NOT_FOUND)&#10;                .entity(new ErrorResponse(&#10;                    &quot;El préstamo indicado no existe&quot;,&#10;                    &quot;LN002&quot;&#10;                ))&#10;                .build();&#10;        }&#10;        &#10;        // 4️⃣ Si se actualiza, retornamos 200 con la respuesta&#10;        return Response&#10;            .ok(&#10;                loanMapper.fromDTOToUpdateResponse(updated.get())&#10;            )&#10;            .build();&#10;    }&#10;    &#10;    @GET&#10;    @Path(&quot;/{loanId}&quot;)&#10;    @Operation(&#10;        operationId = &quot;getLoanById&quot;,&#10;        summary = &quot;Get loan by ID&quot;,&#10;        description = &quot;Retrieves the loan details for the provided loanId.&quot;&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Loan retrieved successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = GetLoanByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetLoanByIdResponse example&quot;,&#10;                        summary = &quot;A loan retrieved by id&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                          &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                          &quot;principalAmount&quot;: 10000.00,&#10;                          &quot;interestRate&quot;: 5.5,&#10;                          &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                          &quot;numberOfMonthlyPayments&quot;: 36,&#10;                          &quot;loanStateId&quot;: &quot;VIGENTE&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-09-01T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Loan not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetLoanById error&quot;,&#10;                        summary = &quot;Loan not found example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El préstamo indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;LN003&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response getLoanById(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId&#10;    ) {&#10;        // 1️⃣ Buscamos el préstamo por ID&#10;        Optional&lt;LoanDTO&gt; loanOpt = loanService.getLoanById(loanId);&#10;        &#10;        // 2️⃣ Si no se encuentra, devolvemos 404&#10;        if (loanOpt.isEmpty()) {&#10;            return Response&#10;                .status(Response.Status.NOT_FOUND)&#10;                .entity(&#10;                    new ErrorResponse(&#10;                        &quot;El préstamo indicado no existe&quot;,&#10;                        &quot;LN003&quot;&#10;                    )&#10;                )&#10;                .build();&#10;        }&#10;        &#10;        // 3️⃣ Si existe, devolvemos el detalle&#10;        return Response&#10;            .ok(loanMapper.fromDTOToGetByIdResponse(loanOpt.get()))&#10;            .build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.springonly.backend.resource;&#10;&#10;import com.springonly.backend.mapper.LoanMapper;&#10;import com.springonly.backend.model.dto.LoanDTO;&#10;import com.springonly.backend.model.request.CreateLoanRequest;&#10;import com.springonly.backend.model.request.UpdateLoanRequest;&#10;import com.springonly.backend.model.response.CreateLoanResponse;&#10;import com.springonly.backend.model.response.GetLoanByIdResponse;&#10;import com.springonly.backend.model.response.UpdateLoanResponse;&#10;import com.springonly.backend.model.response.generic.ErrorResponse;&#10;import com.springonly.backend.service.LoanService;&#10;import jakarta.inject.Inject;&#10;import jakarta.transaction.Transactional;&#10;import jakarta.ws.rs.*;&#10;import jakarta.ws.rs.core.MediaType;&#10;import jakarta.ws.rs.core.Response;&#10;import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;&#10;import org.eclipse.microprofile.openapi.annotations.media.Content;&#10;import org.eclipse.microprofile.openapi.annotations.media.ExampleObject;&#10;import org.eclipse.microprofile.openapi.annotations.media.Schema;&#10;import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;&#10;import org.eclipse.microprofile.openapi.annotations.Operation;&#10;&#10;import java.util.Optional;&#10;&#10;@Schema(&#10;    name = &quot;LoanResource&quot;,&#10;    description = &quot;&quot;&quot;&#10;        Handles loan-related operations such as:&#10;          - Creating new loans for customers&#10;          - Updating existing loans&#10;          - Retrieving loan details by ID&#10;        &quot;&quot;&quot;&#10;)&#10;@Path(&quot;/loans&quot;)&#10;@Produces(MediaType.APPLICATION_JSON)&#10;@Consumes(MediaType.APPLICATION_JSON)&#10;public class LoanResource {&#10;    @Inject&#10;    LoanService loanService;&#10;    &#10;    @Inject&#10;    LoanMapper loanMapper;&#10;    &#10;    @HeaderParam(&quot;X-RelationshipManager-Id&quot;)&#10;    String headerRelationshipManagerId;&#10;    &#10;    @POST&#10;    @Path(&quot;&quot;)&#10;    @Transactional&#10;    @Operation(&#10;        operationId = &quot;createLoan&quot;,&#10;        summary = &quot;Create a new loan&quot;,&#10;        description = &quot;Creates a loan for a customer. Requires a CreateLoanRequest payload with the necessary loan data.&quot;&#10;    )&#10;    @RequestBody(&#10;        description = &quot;CreateLoanRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = CreateLoanRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Create loan example&quot;,&#10;                    summary = &quot;Request to create a loan&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                      &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                      &quot;principalAmount&quot;: 10000.00,&#10;                      &quot;interestRate&quot;: 5.5,&#10;                      &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                      &quot;numberOfMonthlyPayments&quot;: 36&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;201&quot;,&#10;            description = &quot;Loan created successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = CreateLoanResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreateLoanResponse example&quot;,&#10;                        summary = &quot;Created loan representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                          &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                          &quot;principalAmount&quot;: 10000.00,&#10;                          &quot;interestRate&quot;: 5.5,&#10;                          &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                          &quot;numberOfMonthlyPayments&quot;: 36,&#10;                          &quot;loanStateId&quot;: &quot;VIGENTE&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-09-01T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;400&quot;,&#10;            description = &quot;Invalid request&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreateLoan error&quot;,&#10;                        summary = &quot;Invalid input example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;principalAmount must be greater than 0&quot;,&#10;                          &quot;code&quot;: &quot;INVALID_REQUEST&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response createLoan(&#10;        CreateLoanRequest request&#10;    ) {&#10;        // 1️⃣ Convertimos el request a DTO&#10;        LoanDTO fromRequestToDTO = loanMapper.fromCreateRequestToDTO(request);&#10;        &#10;        // 2️⃣ Llamamos al servicio para crear el préstamo&#10;        LoanDTO createdLoan = loanService.createLoan(fromRequestToDTO);&#10;        &#10;        // 3️⃣ Retornamos la respuesta con código 201 (CREATED)&#10;        return Response&#10;                .status(Response.Status.CREATED)&#10;                .entity(loanMapper.fromDTOToCreateResponse(createdLoan))&#10;                .build();&#10;    }&#10;    &#10;    @PATCH&#10;    @Path(&quot;/{loanId}&quot;)&#10;    @Transactional&#10;    @Operation(&#10;        operationId = &quot;updateLoan&quot;,&#10;        summary = &quot;Update an existing loan&quot;,&#10;        description = &quot;Updates loan fields for the given loanId using UpdateLoanRequest.&quot;&#10;    )&#10;    @RequestBody(&#10;        description = &quot;UpdateLoanRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = UpdateLoanRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Update loan example&quot;,&#10;                    summary = &quot;Request to update a loan state&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;loanStateId&quot;: &quot;ACTIVE&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Loan updated successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = UpdateLoanResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdateLoanResponse example&quot;,&#10;                        summary = &quot;Updated loan representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                          &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                          &quot;principalAmount&quot;: 10000.00,&#10;                          &quot;interestRate&quot;: 5.5,&#10;                          &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                          &quot;numberOfMonthlyPayments&quot;: 36,&#10;                          &quot;loanStateId&quot;: &quot;ACTIVE&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-01T09:30:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;400&quot;,&#10;            description = &quot;Invalid request&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdateLoan error&quot;,&#10;                        summary = &quot;Invalid update example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;Invalid update data&quot;,&#10;                          &quot;code&quot;: &quot;INVALID_UPDATE&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Loan not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdateLoan not found&quot;,&#10;                        summary = &quot;Loan to update was not found&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El préstamo indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;LN002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response updateLoan(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        UpdateLoanRequest request&#10;    ) {&#10;        // 1️⃣ Convertimos el request a DTO&#10;        LoanDTO fromRequestToDTO = loanMapper.fromUpdateRequestToDTO(request);&#10;        fromRequestToDTO.setLoanId(loanId);&#10;        &#10;        // 2️⃣ Intentamos actualizar el préstamo&#10;        Optional&lt;LoanDTO&gt; updated = loanService.updateLoan(fromRequestToDTO);&#10;        &#10;        // 3️⃣ Si no existe, retornamos 404&#10;        if (updated.isEmpty()) {&#10;            return Response&#10;                .status(Response.Status.NOT_FOUND)&#10;                .entity(new ErrorResponse(&#10;                    &quot;El préstamo indicado no existe&quot;,&#10;                    &quot;LN002&quot;&#10;                ))&#10;                .build();&#10;        }&#10;        &#10;        // 4️⃣ Si se actualiza, retornamos 200 con la respuesta&#10;        return Response&#10;            .ok(&#10;                loanMapper.fromDTOToUpdateResponse(updated.get())&#10;            )&#10;            .build();&#10;    }&#10;    &#10;    @GET&#10;    @Path(&quot;/{loanId}&quot;)&#10;    @Operation(&#10;        operationId = &quot;getLoanById&quot;,&#10;        summary = &quot;Get loan by ID&quot;,&#10;        description = &quot;Retrieves the loan details for the provided loanId.&quot;&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Loan retrieved successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = GetLoanByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetLoanByIdResponse example&quot;,&#10;                        summary = &quot;A loan retrieved by id&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                          &quot;currencyId&quot;: &quot;PEN&quot;,&#10;                          &quot;principalAmount&quot;: 10000.00,&#10;                          &quot;interestRate&quot;: 5.5,&#10;                          &quot;loanDisbursementDate&quot;: &quot;2025-09-01&quot;,&#10;                          &quot;numberOfMonthlyPayments&quot;: 36,&#10;                          &quot;loanStateId&quot;: &quot;VIGENTE&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-09-01T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Loan not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetLoanById error&quot;,&#10;                        summary = &quot;Loan not found example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El préstamo indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;LN003&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response getLoanById(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId&#10;    ) {&#10;        // 1️⃣ Buscamos el préstamo por ID&#10;        Optional&lt;LoanDTO&gt; loanOpt = loanService.getLoanById(loanId);&#10;        &#10;        // 2️⃣ Si no se encuentra, devolvemos 404&#10;        if (loanOpt.isEmpty()) {&#10;            return Response&#10;                .status(Response.Status.NOT_FOUND)&#10;                .entity(&#10;                    new ErrorResponse(&#10;                        &quot;El préstamo indicado no existe&quot;,&#10;                        &quot;LN003&quot;&#10;                    )&#10;                )&#10;                .build();&#10;        }&#10;        &#10;        // 3️⃣ Si existe, devolvemos el detalle&#10;        return Response&#10;            .ok(loanMapper.fromDTOToGetByIdResponse(loanOpt.get()))&#10;            .build();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/springonly/backend/resource/PaymentResource.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springonly/backend/resource/PaymentResource.java" />
              <option name="originalContent" value="package com.springonly.backend.resource;&#10;&#10;import com.springonly.backend.mapper.PaymentMapper;&#10;import com.springonly.backend.model.dto.PaymentDTO;&#10;import com.springonly.backend.model.request.CreatePaymentRequest;&#10;import com.springonly.backend.model.request.UpdatePaymentRequest;&#10;import com.springonly.backend.model.response.CreatePaymentResponse;&#10;import com.springonly.backend.model.response.GetPaymentByIdResponse;&#10;import com.springonly.backend.model.response.UpdatePaymentResponse;&#10;import com.springonly.backend.model.response.generic.ErrorResponse;&#10;import com.springonly.backend.service.PaymentService;&#10;import jakarta.inject.Inject;&#10;import jakarta.transaction.Transactional;&#10;import jakarta.ws.rs.*;&#10;import jakarta.ws.rs.core.MediaType;&#10;import jakarta.ws.rs.core.Response;&#10;import org.eclipse.microprofile.openapi.annotations.Operation;&#10;import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;&#10;import org.eclipse.microprofile.openapi.annotations.media.Content;&#10;import org.eclipse.microprofile.openapi.annotations.media.ExampleObject;&#10;import org.eclipse.microprofile.openapi.annotations.media.Schema;&#10;import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;&#10;&#10;import java.util.Comparator;&#10;import java.util.List;&#10;&#10;@Schema(&#10;    name = &quot;PaymentResource&quot;,&#10;    description = &quot;&quot;&quot;&#10;        Handles payment-related operations such as:&#10;          - Creating payments for a loan&#10;          - Updating existing payments&#10;          - Listing payments for a specific loan&#10;          - Retrieving a payment by loanId and paymentNumber&#10;        &quot;&quot;&quot;&#10;)&#10;@Path(&quot;/loans&quot;)&#10;@Produces(MediaType.APPLICATION_JSON)&#10;@Consumes(MediaType.APPLICATION_JSON)&#10;public class PaymentResource {&#10;    @Inject&#10;    PaymentService paymentService;&#10;    &#10;    @Inject&#10;    PaymentMapper paymentMapper;&#10;    &#10;    @HeaderParam(&quot;X-RelationshipManager-Id&quot;)&#10;    String headerRelationshipManagerId;&#10;    &#10;    // =======================================================&#10;    // POST: Crear un pago&#10;    // =======================================================&#10;    @POST&#10;    @Path(&quot;/{loanId}/payments/{paymentNumber}&quot;)&#10;    @Transactional&#10;    @Operation(operationId = &quot;createPayment&quot;, summary = &quot;Create payment&quot;, description = &quot;Create a payment for a specific loan and payment number.&quot;)&#10;    @RequestBody(&#10;        description = &quot;CreatePaymentRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = MediaType.APPLICATION_JSON,&#10;            schema = @Schema(implementation = CreatePaymentRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;CreatePayment request&quot;,&#10;                    summary = &quot;Request to create a payment&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                      &quot;principalAmount&quot;: 500.00,&#10;                      &quot;interestAmount&quot;: 5.00&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;201&quot;,&#10;            description = &quot;Payment created successfully&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = CreatePaymentResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreatePaymentResponse example&quot;,&#10;                        summary = &quot;Created payment representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;paymentNumber&quot;: 1,&#10;                          &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                          &quot;principalAmount&quot;: 500.00,&#10;                          &quot;interestAmount&quot;: 5.00,&#10;                          &quot;totalPaymentAmount&quot;: 505.00,&#10;                          &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-15T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;400&quot;,&#10;            description = &quot;Invalid request&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreatePayment error&quot;,&#10;                        summary = &quot;Invalid create payment input&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;Invalid input data&quot;,&#10;                          &quot;code&quot;: &quot;PAY400&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response createPayment(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        @PathParam(&quot;paymentNumber&quot;) Short paymentNumber,&#10;        CreatePaymentRequest request&#10;    ) {&#10;        PaymentDTO dto = paymentMapper.fromCreateRequestToDTO(request);&#10;        dto.setLoanId(loanId);&#10;        dto.setPaymentNumber(paymentNumber);&#10;        &#10;        PaymentDTO created = paymentService.createPayment(dto);&#10;        &#10;        return Response&#10;                .status(Response.Status.CREATED)&#10;                .entity(paymentMapper.fromDTOToCreateResponse(created))&#10;                .build();&#10;    }&#10;    &#10;    // =======================================================&#10;    // PATCH: Actualizar un pago&#10;    // =======================================================&#10;    @PATCH&#10;    @Path(&quot;/{loanId}/payments/{paymentNumber}&quot;)&#10;    @Transactional&#10;    @Operation(operationId = &quot;updatePayment&quot;, summary = &quot;Update payment&quot;, description = &quot;Update an existing payment for a loan identified by loanId and paymentNumber.&quot;)&#10;    @RequestBody(&#10;        description = &quot;UpdatePaymentRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = MediaType.APPLICATION_JSON,&#10;            schema = @Schema(implementation = UpdatePaymentRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;UpdatePayment request&quot;,&#10;                    summary = &quot;Request to update payment state&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;paymentStateId&quot;: &quot;PAID&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Payment updated successfully&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = UpdatePaymentResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdatePaymentResponse example&quot;,&#10;                        summary = &quot;Updated payment representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;paymentNumber&quot;: 1,&#10;                          &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                          &quot;principalAmount&quot;: 500.00,&#10;                          &quot;interestAmount&quot;: 5.00,&#10;                          &quot;totalPaymentAmount&quot;: 505.00,&#10;                          &quot;paymentStateId&quot;: &quot;PAID&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-15T12:05:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Payment not found&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdatePayment not found&quot;,&#10;                        summary = &quot;Payment to update was not found&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El pago indicado no existe para este préstamo&quot;,&#10;                          &quot;code&quot;: &quot;PAY404&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response updatePayment(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        @PathParam(&quot;paymentNumber&quot;) Short paymentNumber,&#10;        UpdatePaymentRequest request&#10;    ) {&#10;        PaymentDTO dto = paymentMapper.fromUpdateRequestToDTO(request);&#10;        dto.setLoanId(loanId);&#10;        dto.setPaymentNumber(paymentNumber);&#10;        &#10;        return paymentService.updatePayment(dto)&#10;            .map(updated -&gt;&#10;                Response.ok(paymentMapper.fromDTOToUpdateResponse(updated)).build()&#10;            )&#10;            .orElseGet(() -&gt;&#10;                Response.status(Response.Status.NOT_FOUND)&#10;                    .entity(new ErrorResponse(&#10;                        &quot;El pago indicado no existe para este préstamo&quot;,&#10;                        &quot;PAY404&quot;)&#10;                    )&#10;                    .build()&#10;            );&#10;    }&#10;    &#10;    // =======================================================&#10;    // GET: Listar pagos por loanId&#10;    // =======================================================&#10;    @GET&#10;    @Path(&quot;/{loanId}/payments&quot;)&#10;    @Operation(operationId = &quot;listPaymentsByLoanId&quot;, summary = &quot;List payments&quot;, description = &quot;List all payments associated to a given loan.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Payments list for loan&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(type = SchemaType.ARRAY, implementation = GetPaymentByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Payments list&quot;,&#10;                        summary = &quot;A list of payments for a loan&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        [&#10;                          {&#10;                            &quot;loanId&quot;: 12345,&#10;                            &quot;paymentNumber&quot;: 1,&#10;                            &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                            &quot;principalAmount&quot;: 500.00,&#10;                            &quot;interestAmount&quot;: 5.00,&#10;                            &quot;totalPaymentAmount&quot;: 505.00,&#10;                            &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2025-10-15T12:00:00Z&quot;&#10;                          },&#10;                          {&#10;                            &quot;loanId&quot;: 12345,&#10;                            &quot;paymentNumber&quot;: 2,&#10;                            &quot;dueDate&quot;: &quot;2025-11-15&quot;,&#10;                            &quot;principalAmount&quot;: 500.00,&#10;                            &quot;interestAmount&quot;: 4.50,&#10;                            &quot;totalPaymentAmount&quot;: 504.50,&#10;                            &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2025-11-15T12:00:00Z&quot;&#10;                          }&#10;                        ]&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;No payments found for loan&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;No payments found&quot;,&#10;                        summary = &quot;No payments for given loan&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El préstamo no tiene pagos registrados&quot;,&#10;                          &quot;code&quot;: &quot;PAY002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response listPaymentsByLoanId(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId&#10;    ) {&#10;        List&lt;PaymentDTO&gt; dtos = paymentService.listPaymentsByLoanId(loanId);&#10;        &#10;        if (dtos.isEmpty()) {&#10;            return Response&#10;                .status(Response.Status.NOT_FOUND)&#10;                .entity(new ErrorResponse(&#10;                    &quot;El préstamo no tiene pagos registrados&quot;,&#10;                    &quot;PAY002&quot;))&#10;                .build();&#10;        }&#10;        &#10;        List&lt;GetPaymentByIdResponse&gt; responses = dtos.stream()&#10;            .map(paymentMapper::fromDTOToGetByIdResponse)&#10;            .sorted(Comparator.comparing(GetPaymentByIdResponse::getPaymentNumber))&#10;            .toList();&#10;        &#10;        return Response.ok(responses).build();&#10;    }&#10;    &#10;    // =======================================================&#10;    // GET: Obtener un pago específico&#10;    // =======================================================&#10;    @GET&#10;    @Path(&quot;/{loanId}/payments/{paymentNumber}&quot;)&#10;    @Operation(operationId = &quot;getPaymentById&quot;, summary = &quot;Get payment by id&quot;, description = &quot;Retrieve a specific payment for a loan by loanId and paymentNumber.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Payment retrieved successfully&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = GetPaymentByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetPaymentByIdResponse example&quot;,&#10;                        summary = &quot;A payment retrieved by id&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;paymentNumber&quot;: 1,&#10;                          &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                          &quot;principalAmount&quot;: 500.00,&#10;                          &quot;interestAmount&quot;: 5.00,&#10;                          &quot;totalPaymentAmount&quot;: 505.00,&#10;                          &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-15T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Payment not found&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetPaymentById not found&quot;,&#10;                        summary = &quot;Requested payment does not exist&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El pago solicitado no existe&quot;,&#10;                          &quot;code&quot;: &quot;PAY003&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response getPaymentById(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        @PathParam(&quot;paymentNumber&quot;) Short paymentNumber&#10;    ) {&#10;        return paymentService.getPaymentById(loanId, paymentNumber)&#10;            .map(dto -&gt;&#10;                Response.ok(paymentMapper.fromDTOToGetByIdResponse(dto)).build()&#10;            )&#10;            .orElseGet(() -&gt;&#10;                Response.status(Response.Status.NOT_FOUND)&#10;                    .entity(new ErrorResponse(&#10;                        &quot;El pago solicitado no existe&quot;,&#10;                        &quot;PAY003&quot;))&#10;                    .build()&#10;            );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.springonly.backend.resource;&#10;&#10;import com.springonly.backend.mapper.PaymentMapper;&#10;import com.springonly.backend.model.dto.PaymentDTO;&#10;import com.springonly.backend.model.request.CreatePaymentRequest;&#10;import com.springonly.backend.model.request.UpdatePaymentRequest;&#10;import com.springonly.backend.model.response.CreatePaymentResponse;&#10;import com.springonly.backend.model.response.GetPaymentByIdResponse;&#10;import com.springonly.backend.model.response.UpdatePaymentResponse;&#10;import com.springonly.backend.model.response.generic.ErrorResponse;&#10;import com.springonly.backend.service.PaymentService;&#10;import jakarta.inject.Inject;&#10;import jakarta.transaction.Transactional;&#10;import jakarta.ws.rs.*;&#10;import jakarta.ws.rs.core.MediaType;&#10;import jakarta.ws.rs.core.Response;&#10;import org.eclipse.microprofile.openapi.annotations.Operation;&#10;import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;&#10;import org.eclipse.microprofile.openapi.annotations.media.Content;&#10;import org.eclipse.microprofile.openapi.annotations.media.ExampleObject;&#10;import org.eclipse.microprofile.openapi.annotations.media.Schema;&#10;import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;&#10;&#10;import java.util.Comparator;&#10;import java.util.List;&#10;&#10;@Schema(&#10;    name = &quot;PaymentResource&quot;,&#10;    description = &quot;&quot;&quot;&#10;        Handles payment-related operations such as:&#10;          - Creating payments for a loan&#10;          - Updating existing payments&#10;          - Listing payments for a specific loan&#10;          - Retrieving a payment by loanId and paymentNumber&#10;        &quot;&quot;&quot;&#10;)&#10;@Path(&quot;/loans&quot;)&#10;@Produces(MediaType.APPLICATION_JSON)&#10;@Consumes(MediaType.APPLICATION_JSON)&#10;public class PaymentResource {&#10;    @Inject&#10;    PaymentService paymentService;&#10;    &#10;    @Inject&#10;    PaymentMapper paymentMapper;&#10;    &#10;    @HeaderParam(&quot;X-RelationshipManager-Id&quot;)&#10;    String headerRelationshipManagerId;&#10;    &#10;    // =======================================================&#10;    // POST: Crear un pago&#10;    // =======================================================&#10;    @POST&#10;    @Path(&quot;/{loanId}/payments/{paymentNumber}&quot;)&#10;    @Transactional&#10;    @Operation(operationId = &quot;createPayment&quot;, summary = &quot;Create payment&quot;, description = &quot;Create a payment for a specific loan and payment number.&quot;)&#10;    @RequestBody(&#10;        description = &quot;CreatePaymentRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = MediaType.APPLICATION_JSON,&#10;            schema = @Schema(implementation = CreatePaymentRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;CreatePayment request&quot;,&#10;                    summary = &quot;Request to create a payment&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                      &quot;principalAmount&quot;: 500.00,&#10;                      &quot;interestAmount&quot;: 5.00&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;201&quot;,&#10;            description = &quot;Payment created successfully&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = CreatePaymentResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreatePaymentResponse example&quot;,&#10;                        summary = &quot;Created payment representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;paymentNumber&quot;: 1,&#10;                          &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                          &quot;principalAmount&quot;: 500.00,&#10;                          &quot;interestAmount&quot;: 5.00,&#10;                          &quot;totalPaymentAmount&quot;: 505.00,&#10;                          &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-15T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;400&quot;,&#10;            description = &quot;Invalid request&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;CreatePayment error&quot;,&#10;                        summary = &quot;Invalid create payment input&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;Invalid input data&quot;,&#10;                          &quot;code&quot;: &quot;PAY400&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response createPayment(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        @PathParam(&quot;paymentNumber&quot;) Short paymentNumber,&#10;        CreatePaymentRequest request&#10;    ) {&#10;        PaymentDTO dto = paymentMapper.fromCreateRequestToDTO(request);&#10;        dto.setLoanId(loanId);&#10;        dto.setPaymentNumber(paymentNumber);&#10;        &#10;        PaymentDTO created = paymentService.createPayment(dto);&#10;        &#10;        return Response&#10;                .status(Response.Status.CREATED)&#10;                .entity(paymentMapper.fromDTOToCreateResponse(created))&#10;                .build();&#10;    }&#10;    &#10;    // =======================================================&#10;    // PATCH: Actualizar un pago&#10;    // =======================================================&#10;    @PATCH&#10;    @Path(&quot;/{loanId}/payments/{paymentNumber}&quot;)&#10;    @Transactional&#10;    @Operation(operationId = &quot;updatePayment&quot;, summary = &quot;Update payment&quot;, description = &quot;Update an existing payment for a loan identified by loanId and paymentNumber.&quot;)&#10;    @RequestBody(&#10;        description = &quot;UpdatePaymentRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = MediaType.APPLICATION_JSON,&#10;            schema = @Schema(implementation = UpdatePaymentRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;UpdatePayment request&quot;,&#10;                    summary = &quot;Request to update payment state&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;paymentStateId&quot;: &quot;PAID&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Payment updated successfully&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = UpdatePaymentResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdatePaymentResponse example&quot;,&#10;                        summary = &quot;Updated payment representation&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;paymentNumber&quot;: 1,&#10;                          &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                          &quot;principalAmount&quot;: 500.00,&#10;                          &quot;interestAmount&quot;: 5.00,&#10;                          &quot;totalPaymentAmount&quot;: 505.00,&#10;                          &quot;paymentStateId&quot;: &quot;PAID&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-15T12:05:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Payment not found&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;UpdatePayment not found&quot;,&#10;                        summary = &quot;Payment to update was not found&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El pago indicado no existe para este préstamo&quot;,&#10;                          &quot;code&quot;: &quot;PAY404&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response updatePayment(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        @PathParam(&quot;paymentNumber&quot;) Short paymentNumber,&#10;        UpdatePaymentRequest request&#10;    ) {&#10;        PaymentDTO dto = paymentMapper.fromUpdateRequestToDTO(request);&#10;        dto.setLoanId(loanId);&#10;        dto.setPaymentNumber(paymentNumber);&#10;        &#10;        return paymentService.updatePayment(dto)&#10;            .map(updated -&gt;&#10;                Response.ok(paymentMapper.fromDTOToUpdateResponse(updated)).build()&#10;            )&#10;            .orElseGet(() -&gt;&#10;                Response.status(Response.Status.NOT_FOUND)&#10;                    .entity(new ErrorResponse(&#10;                        &quot;El pago indicado no existe para este préstamo&quot;,&#10;                        &quot;PAY404&quot;)&#10;                    )&#10;                    .build()&#10;            );&#10;    }&#10;    &#10;    // =======================================================&#10;    // GET: Listar pagos por loanId&#10;    // =======================================================&#10;    @GET&#10;    @Path(&quot;/{loanId}/payments&quot;)&#10;    @Operation(operationId = &quot;listPaymentsByLoanId&quot;, summary = &quot;List payments&quot;, description = &quot;List all payments associated to a given loan.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Payments list for loan&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(type = SchemaType.ARRAY, implementation = GetPaymentByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Payments list&quot;,&#10;                        summary = &quot;A list of payments for a loan&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        [&#10;                          {&#10;                            &quot;loanId&quot;: 12345,&#10;                            &quot;paymentNumber&quot;: 1,&#10;                            &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                            &quot;principalAmount&quot;: 500.00,&#10;                            &quot;interestAmount&quot;: 5.00,&#10;                            &quot;totalPaymentAmount&quot;: 505.00,&#10;                            &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2025-10-15T12:00:00Z&quot;&#10;                          },&#10;                          {&#10;                            &quot;loanId&quot;: 12345,&#10;                            &quot;paymentNumber&quot;: 2,&#10;                            &quot;dueDate&quot;: &quot;2025-11-15&quot;,&#10;                            &quot;principalAmount&quot;: 500.00,&#10;                            &quot;interestAmount&quot;: 4.50,&#10;                            &quot;totalPaymentAmount&quot;: 504.50,&#10;                            &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2025-11-15T12:00:00Z&quot;&#10;                          }&#10;                        ]&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;No payments found for loan&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;No payments found&quot;,&#10;                        summary = &quot;No payments for given loan&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El préstamo no tiene pagos registrados&quot;,&#10;                          &quot;code&quot;: &quot;PAY002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response listPaymentsByLoanId(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId&#10;    ) {&#10;        List&lt;PaymentDTO&gt; dtos = paymentService.listPaymentsByLoanId(loanId);&#10;        &#10;        if (dtos.isEmpty()) {&#10;            return Response&#10;                .status(Response.Status.NOT_FOUND)&#10;                .entity(new ErrorResponse(&#10;                    &quot;El préstamo no tiene pagos registrados&quot;,&#10;                    &quot;PAY002&quot;))&#10;                .build();&#10;        }&#10;        &#10;        List&lt;GetPaymentByIdResponse&gt; responses = dtos.stream()&#10;            .map(paymentMapper::fromDTOToGetByIdResponse)&#10;            .sorted(Comparator.comparing(GetPaymentByIdResponse::getPaymentNumber))&#10;            .toList();&#10;        &#10;        return Response.ok(responses).build();&#10;    }&#10;    &#10;    // =======================================================&#10;    // GET: Obtener un pago específico&#10;    // =======================================================&#10;    @GET&#10;    @Path(&quot;/{loanId}/payments/{paymentNumber}&quot;)&#10;    @Operation(operationId = &quot;getPaymentById&quot;, summary = &quot;Get payment by id&quot;, description = &quot;Retrieve a specific payment for a loan by loanId and paymentNumber.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Payment retrieved successfully&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = GetPaymentByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetPaymentByIdResponse example&quot;,&#10;                        summary = &quot;A payment retrieved by id&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;loanId&quot;: 12345,&#10;                          &quot;paymentNumber&quot;: 1,&#10;                          &quot;dueDate&quot;: &quot;2025-10-15&quot;,&#10;                          &quot;principalAmount&quot;: 500.00,&#10;                          &quot;interestAmount&quot;: 5.00,&#10;                          &quot;totalPaymentAmount&quot;: 505.00,&#10;                          &quot;paymentStateId&quot;: &quot;PENDING&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-15T12:00:00Z&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Payment not found&quot;,&#10;            content = @Content(&#10;                mediaType = MediaType.APPLICATION_JSON,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetPaymentById not found&quot;,&#10;                        summary = &quot;Requested payment does not exist&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El pago solicitado no existe&quot;,&#10;                          &quot;code&quot;: &quot;PAY003&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response getPaymentById(&#10;        @PathParam(&quot;loanId&quot;) Integer loanId,&#10;        @PathParam(&quot;paymentNumber&quot;) Short paymentNumber&#10;    ) {&#10;        return paymentService.getPaymentById(loanId, paymentNumber)&#10;            .map(dto -&gt;&#10;                Response.ok(paymentMapper.fromDTOToGetByIdResponse(dto)).build()&#10;            )&#10;            .orElseGet(() -&gt;&#10;                Response.status(Response.Status.NOT_FOUND)&#10;                    .entity(new ErrorResponse(&#10;                        &quot;El pago solicitado no existe&quot;,&#10;                        &quot;PAY003&quot;))&#10;                    .build()&#10;            );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/springonly/backend/resource/RelationshipManagerResource.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springonly/backend/resource/RelationshipManagerResource.java" />
              <option name="originalContent" value="package com.springonly.backend.resource;&#10;&#10;import com.springonly.backend.mapper.CustomerMapper;&#10;import com.springonly.backend.mapper.RelationshipManagerMapper;&#10;import com.springonly.backend.model.dto.CustomerDTO;&#10;import com.springonly.backend.model.dto.RelationshipManagerDTO;&#10;import com.springonly.backend.model.request.LoginRelationshipManagerRequest;&#10;import com.springonly.backend.model.request.UpdateRelationshipManagerThreadIdRequest;&#10;import com.springonly.backend.model.response.GetCustomerByIdResponse;&#10;import com.springonly.backend.model.response.GetRelationshipManagerByIdResponse;&#10;import com.springonly.backend.model.response.LoginRelationshipManagerResponse;&#10;import com.springonly.backend.model.response.UpdateRelationshipManagerThreadIdResponse;&#10;import com.springonly.backend.model.response.generic.ErrorResponse;&#10;import com.springonly.backend.service.CustomerService;&#10;import com.springonly.backend.service.RelationshipManagerService;&#10;import jakarta.inject.Inject;&#10;import jakarta.transaction.Transactional;&#10;import jakarta.ws.rs.*;&#10;import jakarta.ws.rs.core.MediaType;&#10;import jakarta.ws.rs.core.Response;&#10;import org.eclipse.microprofile.openapi.annotations.Operation;&#10;import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;&#10;import org.eclipse.microprofile.openapi.annotations.media.Content;&#10;import org.eclipse.microprofile.openapi.annotations.media.ExampleObject;&#10;import org.eclipse.microprofile.openapi.annotations.media.Schema;&#10;import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;&#10;&#10;import java.util.Comparator;&#10;import java.util.List;&#10;&#10;@Schema(&#10;    name = &quot;RelationshipManagerResource&quot;,&#10;    description = &quot;&quot;&quot;&#10;        Handles relationship-manager related operations such as:&#10;          - Authenticating relationship managers&#10;          - Updating thread id information&#10;          - Retrieving relationship manager details&#10;          - Listing customers assigned to a relationship manager&#10;        &quot;&quot;&quot;&#10;)&#10;@Path(&quot;/relationship-managers&quot;)&#10;@Produces(MediaType.APPLICATION_JSON)&#10;@Consumes(MediaType.APPLICATION_JSON)&#10;public class RelationshipManagerResource {&#10;    @Inject&#10;    RelationshipManagerService relationshipManagerService;&#10;&#10;    @Inject&#10;    RelationshipManagerMapper relationshipManagerMapper;&#10;&#10;    @Inject&#10;    CustomerService customerService;&#10;&#10;    @Inject&#10;    CustomerMapper customerMapper;&#10;&#10;    @HeaderParam(&quot;X-RelationshipManager-Id&quot;)&#10;    String headerRelationshipManagerId;&#10;&#10;    @POST&#10;    @Path(&quot;/login&quot;)&#10;    @Operation(operationId = &quot;loginRelationshipManager&quot;, summary = &quot;Login relationship manager&quot;, description = &quot;Authenticate a relationship manager and return session or token details.&quot;)&#10;    @RequestBody(&#10;        description = &quot;LoginRelationshipManagerRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = LoginRelationshipManagerRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Login request&quot;,&#10;                    summary = &quot;Request to authenticate a relationship manager&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                      &quot;password&quot;: &quot;s3cr3t&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Login successful&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = LoginRelationshipManagerResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Login successful&quot;,&#10;                        summary = &quot;Authenticated relationship manager response&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                          &quot;relationshipManagerName&quot;: &quot;Ana Pérez&quot;,&#10;                          &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-07T22:27:36.707224-05:00&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;401&quot;,&#10;            description = &quot;Unauthorized&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Unauthorized login&quot;,&#10;                        summary = &quot;Invalid credentials example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;Usuario y/o password incorrectos&quot;,&#10;                          &quot;code&quot;: &quot;RM001&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response loginRelationshipManager(&#10;        LoginRelationshipManagerRequest request&#10;    ) {&#10;        RelationshipManagerDTO fromRequestToDTO = relationshipManagerMapper.fromLoginRequestToDTO(request);&#10;&#10;        return relationshipManagerService.loginRelationshipManager(fromRequestToDTO)&#10;            .map(&#10;                dtoFromService&#10;                -&gt;&#10;                Response&#10;                .ok(relationshipManagerMapper.fromDTOToLoginResponse(dtoFromService))&#10;                .build()&#10;            )&#10;            .orElseGet(&#10;                () -&gt;&#10;                Response&#10;                .status(Response.Status.UNAUTHORIZED)&#10;                .entity(&#10;                    new ErrorResponse(&#10;                        &quot;Usuario y/o password incorrectos&quot;,&#10;                        &quot;RM001&quot;)&#10;                )&#10;                .build()&#10;            );&#10;    }&#10;&#10;    @PATCH&#10;    @Path(&quot;/{relationshipManagerId}&quot;)&#10;    @Transactional&#10;    @Operation(operationId = &quot;updateRelationshipManagerThreadId&quot;, summary = &quot;Update thread id&quot;, description = &quot;Update the thread id information for a relationship manager.&quot;)&#10;    @RequestBody(&#10;        description = &quot;UpdateRelationshipManagerThreadIdRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = UpdateRelationshipManagerThreadIdRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Update thread id request&quot;,&#10;                    summary = &quot;Request to update relationship manager thread id&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Relationship manager thread id updated&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = UpdateRelationshipManagerThreadIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Update thread id success&quot;,&#10;                        summary = &quot;Updated relationship manager thread id response&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                          &quot;relationshipManagerName&quot;: &quot;Ana Pérez&quot;,&#10;                          &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-07T22:27:36.707224-05:00&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Relationship manager not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Update thread id not found&quot;,&#10;                        summary = &quot;Relationship manager not found example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;RM002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response updateRelationshipManagerThreadId(&#10;        @PathParam(&quot;relationshipManagerId&quot;) String relationshipManagerId,&#10;        UpdateRelationshipManagerThreadIdRequest request&#10;    ) {&#10;        RelationshipManagerDTO fromRequestToDTO = relationshipManagerMapper.fromUpdateThreadIdRequestToDTO(request);&#10;        fromRequestToDTO.setRelationshipManagerId(relationshipManagerId);&#10;&#10;        return relationshipManagerService&#10;                .updateRelationshipManagerThreadId(fromRequestToDTO)&#10;                .map(&#10;                    dtoFromService&#10;                    -&gt;&#10;                    Response.ok(relationshipManagerMapper.fromDTOToUpdateThreadIdResponse(dtoFromService))&#10;                    .build()&#10;                )&#10;                .orElseGet(&#10;                    ()&#10;                    -&gt;&#10;                    Response.status(Response.Status.NOT_FOUND)&#10;                    .entity(&#10;                        new ErrorResponse(&#10;                            &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                            &quot;RM002&quot;&#10;                        )&#10;                    )&#10;                    .build()&#10;                );&#10;    }&#10;&#10;    @GET&#10;    @Path(&quot;/{relationshipManagerId}&quot;)&#10;    @Operation(operationId = &quot;getRelationshipManagerById&quot;, summary = &quot;Get relationship manager&quot;, description = &quot;Retrieve relationship manager details by id.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Relationship manager retrieved successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = GetRelationshipManagerByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetRelationshipManagerByIdResponse example&quot;,&#10;                        summary = &quot;A relationship manager retrieved by id&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                          &quot;relationshipManagerName&quot;: &quot;Ana Pérez&quot;,&#10;                          &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-07T22:27:36.707224-05:00&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Relationship manager not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetRelationshipManager not found&quot;,&#10;                        summary = &quot;Requested relationship manager does not exist&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;RM003&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response getRelationshipManagerById(&#10;        @PathParam(&quot;relationshipManagerId&quot;) String relationshipManagerId&#10;    ) {&#10;        return relationshipManagerService&#10;                .getRelationshipManagerById(relationshipManagerId)&#10;                .map(&#10;                    dtoFromService -&gt;&#10;                    Response&#10;                    .ok(relationshipManagerMapper.fromDTOToGetByIdResponse(dtoFromService))&#10;                    .build()&#10;                )&#10;                .orElseGet(&#10;                    ()&#10;                    -&gt;&#10;                    Response&#10;                    .status(Response.Status.NOT_FOUND)&#10;                    .entity(&#10;                        new ErrorResponse(&#10;                            &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                            &quot;RM003&quot;)&#10;                    )&#10;                    .build()&#10;                );&#10;    }&#10;    &#10;    @GET&#10;    @Path(&quot;/{relationshipManagerId}/customers&quot;)&#10;    @Operation(operationId = &quot;listCustomersByRelationshipManagerById&quot;, summary = &quot;List customers&quot;, description = &quot;List customers assigned to a specific relationship manager.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Customers list for relationship manager&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(type = SchemaType.ARRAY, implementation = GetCustomerByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Customers list&quot;,&#10;                        summary = &quot;A list of customers for a relationship manager&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        [&#10;                          {&#10;                            &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                            &quot;customerName&quot;: &quot;John Doe&quot;,&#10;                            &quot;customerTypeId&quot;: &quot;MICRO EMPRESA&quot;,&#10;                            &quot;riskCategoryId&quot;: &quot;DU&quot;,&#10;                            &quot;lineOfCreditAmount&quot;: 50000.00,&#10;                            &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2024-12-14T19:37:26-05:00&quot;&#10;                          },&#10;                          {&#10;                            &quot;customerId&quot;: &quot;CUST67890&quot;,&#10;                            &quot;customerName&quot;: &quot;María López&quot;,&#10;                            &quot;customerTypeId&quot;: &quot;PERSONAL&quot;,&#10;                            &quot;riskCategoryId&quot;: &quot;PP&quot;,&#10;                            &quot;lineOfCreditAmount&quot;: 15000.00,&#10;                            &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2025-01-20T15:00:00-05:00&quot;&#10;                          }&#10;                        ]&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;No customers found for relationship manager&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;No customers found&quot;,&#10;                        summary = &quot;No customers for given relationship manager&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El Ejecutivo de Cuentas no tiene clientes asignados&quot;,&#10;                          &quot;code&quot;: &quot;RM002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response listCustomersByRelationshipManagerById(&#10;        @PathParam(&quot;relationshipManagerId&quot;) String relationshipManagerId&#10;    ) {&#10;        List&lt;CustomerDTO&gt; dtos =&#10;            customerService.listCustomersByRelationshipManagerById(relationshipManagerId);&#10;        &#10;        if (dtos.isEmpty()) {&#10;            return Response&#10;                    .status(Response.Status.NOT_FOUND)&#10;                    .entity(&#10;                        new ErrorResponse(&#10;                            &quot;El Ejecutivo de Cuentas no tiene clientes asignados&quot;,&#10;                            &quot;RM002&quot;&#10;                        )&#10;                    )&#10;                    .build();&#10;        }&#10;        &#10;        // Mapeamos y ordenamos los resultados&#10;        List&lt;GetCustomerByIdResponse&gt; responses = dtos.stream()&#10;            .map(customerMapper::fromDTOToGetByIdResponse)&#10;            .sorted(Comparator.comparing(GetCustomerByIdResponse::getCustomerName))&#10;            .toList();&#10;        &#10;        return Response.ok(responses).build();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.springonly.backend.resource;&#10;&#10;import com.springonly.backend.mapper.CustomerMapper;&#10;import com.springonly.backend.mapper.RelationshipManagerMapper;&#10;import com.springonly.backend.model.dto.CustomerDTO;&#10;import com.springonly.backend.model.dto.RelationshipManagerDTO;&#10;import com.springonly.backend.model.request.LoginRelationshipManagerRequest;&#10;import com.springonly.backend.model.request.UpdateRelationshipManagerThreadIdRequest;&#10;import com.springonly.backend.model.response.GetCustomerByIdResponse;&#10;import com.springonly.backend.model.response.GetRelationshipManagerByIdResponse;&#10;import com.springonly.backend.model.response.LoginRelationshipManagerResponse;&#10;import com.springonly.backend.model.response.UpdateRelationshipManagerThreadIdResponse;&#10;import com.springonly.backend.model.response.generic.ErrorResponse;&#10;import com.springonly.backend.service.CustomerService;&#10;import com.springonly.backend.service.RelationshipManagerService;&#10;import jakarta.inject.Inject;&#10;import jakarta.transaction.Transactional;&#10;import jakarta.ws.rs.*;&#10;import jakarta.ws.rs.core.MediaType;&#10;import jakarta.ws.rs.core.Response;&#10;import org.eclipse.microprofile.openapi.annotations.Operation;&#10;import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;&#10;import org.eclipse.microprofile.openapi.annotations.media.Content;&#10;import org.eclipse.microprofile.openapi.annotations.media.ExampleObject;&#10;import org.eclipse.microprofile.openapi.annotations.media.Schema;&#10;import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;&#10;import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;&#10;&#10;import java.util.Comparator;&#10;import java.util.List;&#10;&#10;@Schema(&#10;    name = &quot;RelationshipManagerResource&quot;,&#10;    description = &quot;&quot;&quot;&#10;        Handles relationship-manager related operations such as:&#10;          - Authenticating relationship managers&#10;          - Updating thread id information&#10;          - Retrieving relationship manager details&#10;          - Listing customers assigned to a relationship manager&#10;        &quot;&quot;&quot;&#10;)&#10;@Path(&quot;/relationship-managers&quot;)&#10;@Produces(MediaType.APPLICATION_JSON)&#10;@Consumes(MediaType.APPLICATION_JSON)&#10;public class RelationshipManagerResource {&#10;    @Inject&#10;    RelationshipManagerService relationshipManagerService;&#10;&#10;    @Inject&#10;    RelationshipManagerMapper relationshipManagerMapper;&#10;&#10;    @Inject&#10;    CustomerService customerService;&#10;&#10;    @Inject&#10;    CustomerMapper customerMapper;&#10;&#10;    @HeaderParam(&quot;X-RelationshipManager-Id&quot;)&#10;    String headerRelationshipManagerId;&#10;&#10;    @POST&#10;    @Path(&quot;/login&quot;)&#10;    @Operation(operationId = &quot;loginRelationshipManager&quot;, summary = &quot;Login relationship manager&quot;, description = &quot;Authenticate a relationship manager and return session or token details.&quot;)&#10;    @RequestBody(&#10;        description = &quot;LoginRelationshipManagerRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = LoginRelationshipManagerRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Login request&quot;,&#10;                    summary = &quot;Request to authenticate a relationship manager&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                      &quot;password&quot;: &quot;s3cr3t&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Login successful&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = LoginRelationshipManagerResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Login successful&quot;,&#10;                        summary = &quot;Authenticated relationship manager response&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                          &quot;relationshipManagerName&quot;: &quot;Ana Pérez&quot;,&#10;                          &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-07T22:27:36.707224-05:00&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;401&quot;,&#10;            description = &quot;Unauthorized&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Unauthorized login&quot;,&#10;                        summary = &quot;Invalid credentials example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;Usuario y/o password incorrectos&quot;,&#10;                          &quot;code&quot;: &quot;RM001&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response loginRelationshipManager(&#10;        LoginRelationshipManagerRequest request&#10;    ) {&#10;        RelationshipManagerDTO fromRequestToDTO = relationshipManagerMapper.fromLoginRequestToDTO(request);&#10;&#10;        return relationshipManagerService.loginRelationshipManager(fromRequestToDTO)&#10;            .map(&#10;                dtoFromService&#10;                -&gt;&#10;                Response&#10;                .ok(relationshipManagerMapper.fromDTOToLoginResponse(dtoFromService))&#10;                .build()&#10;            )&#10;            .orElseGet(&#10;                () -&gt;&#10;                Response&#10;                .status(Response.Status.UNAUTHORIZED)&#10;                .entity(&#10;                    new ErrorResponse(&#10;                        &quot;Usuario y/o password incorrectos&quot;,&#10;                        &quot;RM001&quot;)&#10;                )&#10;                .build()&#10;            );&#10;    }&#10;&#10;    @PATCH&#10;    @Path(&quot;/{relationshipManagerId}&quot;)&#10;    @Transactional&#10;    @Operation(operationId = &quot;updateRelationshipManagerThreadId&quot;, summary = &quot;Update thread id&quot;, description = &quot;Update the thread id information for a relationship manager.&quot;)&#10;    @RequestBody(&#10;        description = &quot;UpdateRelationshipManagerThreadIdRequest payload&quot;,&#10;        required = true,&#10;        content = @Content(&#10;            mediaType = &quot;application/json&quot;,&#10;            schema = @Schema(implementation = UpdateRelationshipManagerThreadIdRequest.class),&#10;            examples = {&#10;                @ExampleObject(&#10;                    name = &quot;Update thread id request&quot;,&#10;                    summary = &quot;Request to update relationship manager thread id&quot;,&#10;                    value = &quot;&quot;&quot;&#10;                    {&#10;                      &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;&#10;                    }&#10;                    &quot;&quot;&quot;&#10;                )&#10;            }&#10;        )&#10;    )&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Relationship manager thread id updated&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = UpdateRelationshipManagerThreadIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Update thread id success&quot;,&#10;                        summary = &quot;Updated relationship manager thread id response&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                          &quot;relationshipManagerName&quot;: &quot;Ana Pérez&quot;,&#10;                          &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-07T22:27:36.707224-05:00&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Relationship manager not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Update thread id not found&quot;,&#10;                        summary = &quot;Relationship manager not found example&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;RM002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response updateRelationshipManagerThreadId(&#10;        @PathParam(&quot;relationshipManagerId&quot;) String relationshipManagerId,&#10;        UpdateRelationshipManagerThreadIdRequest request&#10;    ) {&#10;        RelationshipManagerDTO fromRequestToDTO = relationshipManagerMapper.fromUpdateThreadIdRequestToDTO(request);&#10;        fromRequestToDTO.setRelationshipManagerId(relationshipManagerId);&#10;&#10;        return relationshipManagerService&#10;                .updateRelationshipManagerThreadId(fromRequestToDTO)&#10;                .map(&#10;                    dtoFromService&#10;                    -&gt;&#10;                    Response.ok(relationshipManagerMapper.fromDTOToUpdateThreadIdResponse(dtoFromService))&#10;                    .build()&#10;                )&#10;                .orElseGet(&#10;                    ()&#10;                    -&gt;&#10;                    Response.status(Response.Status.NOT_FOUND)&#10;                    .entity(&#10;                        new ErrorResponse(&#10;                            &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                            &quot;RM002&quot;&#10;                        )&#10;                    )&#10;                    .build()&#10;                );&#10;    }&#10;&#10;    @GET&#10;    @Path(&quot;/{relationshipManagerId}&quot;)&#10;    @Operation(operationId = &quot;getRelationshipManagerById&quot;, summary = &quot;Get relationship manager&quot;, description = &quot;Retrieve relationship manager details by id.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Relationship manager retrieved successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = GetRelationshipManagerByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetRelationshipManagerByIdResponse example&quot;,&#10;                        summary = &quot;A relationship manager retrieved by id&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                          &quot;relationshipManagerName&quot;: &quot;Ana Pérez&quot;,&#10;                          &quot;threadId&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;,&#10;                          &quot;writtenAt&quot;: &quot;2025-10-07T22:27:36.707224-05:00&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;Relationship manager not found&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;GetRelationshipManager not found&quot;,&#10;                        summary = &quot;Requested relationship manager does not exist&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                          &quot;code&quot;: &quot;RM003&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response getRelationshipManagerById(&#10;        @PathParam(&quot;relationshipManagerId&quot;) String relationshipManagerId&#10;    ) {&#10;        return relationshipManagerService&#10;                .getRelationshipManagerById(relationshipManagerId)&#10;                .map(&#10;                    dtoFromService -&gt;&#10;                    Response&#10;                    .ok(relationshipManagerMapper.fromDTOToGetByIdResponse(dtoFromService))&#10;                    .build()&#10;                )&#10;                .orElseGet(&#10;                    ()&#10;                    -&gt;&#10;                    Response&#10;                    .status(Response.Status.NOT_FOUND)&#10;                    .entity(&#10;                        new ErrorResponse(&#10;                            &quot;El Ejecutivo de Cuenta indicado no existe&quot;,&#10;                            &quot;RM003&quot;)&#10;                    )&#10;                    .build()&#10;                );&#10;    }&#10;    &#10;    @GET&#10;    @Path(&quot;/{relationshipManagerId}/customers&quot;)&#10;    @Operation(operationId = &quot;listCustomersByRelationshipManagerById&quot;, summary = &quot;List customers&quot;, description = &quot;List customers assigned to a specific relationship manager.&quot;)&#10;    @APIResponses({&#10;        @APIResponse(&#10;            responseCode = &quot;200&quot;,&#10;            description = &quot;Customers list for relationship manager&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(type = SchemaType.ARRAY, implementation = GetCustomerByIdResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;Customers list&quot;,&#10;                        summary = &quot;A list of customers for a relationship manager&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        [&#10;                          {&#10;                            &quot;customerId&quot;: &quot;CUST12345&quot;,&#10;                            &quot;customerName&quot;: &quot;John Doe&quot;,&#10;                            &quot;customerTypeId&quot;: &quot;MICRO EMPRESA&quot;,&#10;                            &quot;riskCategoryId&quot;: &quot;DU&quot;,&#10;                            &quot;lineOfCreditAmount&quot;: 50000.00,&#10;                            &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2024-12-14T19:37:26-05:00&quot;&#10;                          },&#10;                          {&#10;                            &quot;customerId&quot;: &quot;CUST67890&quot;,&#10;                            &quot;customerName&quot;: &quot;María López&quot;,&#10;                            &quot;customerTypeId&quot;: &quot;PERSONAL&quot;,&#10;                            &quot;riskCategoryId&quot;: &quot;PP&quot;,&#10;                            &quot;lineOfCreditAmount&quot;: 15000.00,&#10;                            &quot;relationshipManagerId&quot;: &quot;RM001&quot;,&#10;                            &quot;writtenAt&quot;: &quot;2025-01-20T15:00:00-05:00&quot;&#10;                          }&#10;                        ]&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        ),&#10;        @APIResponse(&#10;            responseCode = &quot;404&quot;,&#10;            description = &quot;No customers found for relationship manager&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = ErrorResponse.class),&#10;                examples = {&#10;                    @ExampleObject(&#10;                        name = &quot;No customers found&quot;,&#10;                        summary = &quot;No customers for given relationship manager&quot;,&#10;                        value = &quot;&quot;&quot;&#10;                        {&#10;                          &quot;message&quot;: &quot;El Ejecutivo de Cuentas no tiene clientes asignados&quot;,&#10;                          &quot;code&quot;: &quot;RM002&quot;&#10;                        }&#10;                        &quot;&quot;&quot;&#10;                    )&#10;                }&#10;            )&#10;        )&#10;    })&#10;    public Response listCustomersByRelationshipManagerById(&#10;        @PathParam(&quot;relationshipManagerId&quot;) String relationshipManagerId&#10;    ) {&#10;        List&lt;CustomerDTO&gt; dtos =&#10;            customerService.listCustomersByRelationshipManagerById(relationshipManagerId);&#10;        &#10;        if (dtos.isEmpty()) {&#10;            return Response&#10;                    .status(Response.Status.NOT_FOUND)&#10;                    .entity(&#10;                        new ErrorResponse(&#10;                            &quot;El Ejecutivo de Cuentas no tiene clientes asignados&quot;,&#10;                            &quot;RM002&quot;&#10;                        )&#10;                    )&#10;                    .build();&#10;        }&#10;        &#10;        // Mapeamos y ordenamos los resultados&#10;        List&lt;GetCustomerByIdResponse&gt; responses = dtos.stream()&#10;            .map(customerMapper::fromDTOToGetByIdResponse)&#10;            .sorted(Comparator.comparing(GetCustomerByIdResponse::getCustomerName))&#10;            .toList();&#10;        &#10;        return Response.ok(responses).build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>