name: Create Azure Infrastructure

on:
  workflow_dispatch:  # Solo se ejecutará a demanda. Si el recurso ya existe, no hará nada.


jobs:
  job-create-infra-azure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.INFRA_AZURE_SERVICE_PRINCIPAL_INFO }}

      - name: Create Resource Group if not exists
        run: |
          if az group show \
            --name ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "⚠️ Resource group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} already exists."
          else
            echo "✅ Creating resource group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} ..."
            az group create \
              --name ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --subscription ${{ vars.INFRA_AZURE_SUBSCRIPTION_ID }}
          fi

      - name: Create SQL Server if not exists
        run: |
          if az sql server show \
            --name ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "⚠️ SQL Server ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} already exists."
          else
            echo "✅ Creating SQL Server ..."
            az sql server create \
              --name ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --admin-user ${{ vars.INFRA_AZURE_SQLSERVER_ADMIN_LOGINNAME }} \
              --admin-password ${{ secrets.INFRA_AZURE_SQLSERVER_ADMIN_LOGINPASSWORD }}
          fi

      - name: Create SQL Database if not exists
        run: |
          if az sql db show \
            --name ${{ vars.INFRA_AZURE_SQLSERVER_DB_NAME }} \
            --server ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "⚠️ SQL DB ${{ vars.INFRA_AZURE_SQLSERVER_DB_NAME }} already exists."
          else
            echo "✅ Creating SQL Database ..."
            az sql db create \
              --name ${{ vars.INFRA_AZURE_SQLSERVER_DB_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --server ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
              --edition GeneralPurpose \
              --compute-model Serverless \
              --family Gen5 \
              --capacity 2 \
              --min-capacity 0.5 \
              --max-size 5GB \
              --zone-redundant false
          fi

      - name: Create Azure Container Registry if not exists
        run: |
          if az acr show \
            --name ${{ vars.INFRA_AZURE_ACR_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "⚠️ ACR ${{ vars.INFRA_AZURE_ACR_NAME }} already exists."
          else
            echo "✅ Creating ACR ..."
            az acr create \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --name ${{ vars.INFRA_AZURE_ACR_NAME }} \
              --sku Basic \
              --admin-enabled true
          fi

      - name: Create Log Analytics if not exists
        run: |
          if az monitor log-analytics workspace show \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} &>/dev/null; then
            echo "⚠️ Log Analytics Workspace ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} already exists."
          else
            echo "✅ Creating Log Analytics Workspace ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} ..."
            az monitor log-analytics workspace create \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }}
          fi

      - name: Create Container App Environment if not exists
        run: |
          if az containerapp env show \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} &>/dev/null; then
            echo "⚠️ Container App Environment '${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }}' already exists."
          else
            echo "✅ Creating Container App Environment '${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }}' ..."
            az containerapp env create \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --logs-destination log-analytics \
              --logs-workspace-id  $(az monitor log-analytics workspace show \
                  --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
                  --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} \
                  --query customerId -o tsv) \
              --logs-workspace-key $(az monitor log-analytics workspace get-shared-keys \
                  --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
                  --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} \
                  --query primarySharedKey -o tsv)
          fi

      - name: Wait for Container App Environment creation
        run: |
          export SLEEP_IN_SECONDS=15
          export TOTAL_WAIT_TIME_IN_SECONDS=900  # 15 minutes
          export MAX_RETRIES=$((TOTAL_WAIT_TIME_IN_SECONDS / SLEEP_IN_SECONDS))

          echo "⏳ Waiting for Container App Environment ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} creation for $TOTAL_WAIT_TIME_IN_SECONDS seconds ..."

          for i in $(seq 1 $MAX_RETRIES); do
            STATUS=$(az containerapp env show \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} \
              --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")

            echo $(TZ="America/Lima" date +"%Y-%m-%d %H:%M:%S") "Status [$(printf "%03d" "$i") of $(printf "%03d" "$MAX_RETRIES")]: $STATUS"
            if [ "$STATUS" = "Succeeded" ]; then
              echo "✅ Container App Environment is ready"
              break
            fi
            if [ "$i" -eq "$MAX_RETRIES" ]; then
              echo "❌ Timeout waiting for Container App Environment to be ready"
              exit 1
            fi
            sleep "$SLEEP_IN_SECONDS"
          done

      - name: Create Backend Container App if not exists
        run: |
          if az containerapp show \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "⚠️ Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }} already exists."
          else
            export dummy_image=mcr.microsoft.com/azuredocs/containerapps-helloworld:latest
            echo "✅ Creating Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }} ..."
            az containerapp create \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --environment ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} \
              --image $dummy_image \
              --registry-server ${{ vars.INFRA_AZURE_ACR_NAME }}.azurecr.io \
              --registry-username $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query username -o tsv) \
              --registry-password $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query passwords[0].value -o tsv) \
              --ingress external \
              --target-port ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_PORT }}

      - name: Adding custom domain for Backend Container App
        id: getfqdn
        run: |
          echo "✅ Adding custom domain ${{ vars.INFRA_BACKEND_DOMAIN_NAME }} to Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }} ..."
          az containerapp hostname add \
            --name ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
            --hostname ${{ vars.INFRA_BACKEND_DOMAIN_NAME }}

          fqdn=$(az containerapp show \
            --name ${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
            --query properties.configuration.ingress.fqdn -o tsv)

          echo "fqdn=$fqdn" >> $GITHUB_OUTPUT

      # Configurar CNAME en Route53
      - name: Updating Route53 DNS
        uses: aws-actions/aws-cli@v2
        with:
          aws-access-key-id: ${{ vars.INFRA_AWS_DNS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INFRA_AWS_DNS_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.INFRA_AWS_DNS_REGION }}
          args: |
            route53 change-resource-record-sets --hosted-zone-id ${{ vars.INFRA_AWS_DNS_HOSTED_ZONE_ID }} --change-batch '{
              "Changes": [{
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "${{ vars.INFRA_BACKEND_DOMAIN_NAME }}",
                  "Type": "CNAME",
                  "TTL": 300,
                  "ResourceRecords": [{ "Value": "${{ steps.getfqdn.outputs.fqdn }}" }]
                }
              }]
            }'

      - name: Create FrontEnd Container App if not exists
        run: |
          if az containerapp show \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "⚠️ Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} already exists."
          else
            export dummy_image=mcr.microsoft.com/azuredocs/containerapps-helloworld:latest
            echo "✅ Creating Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} ..."
            az containerapp create \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --environment ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} \
              --image $dummy_image \
              --registry-server ${{ vars.INFRA_AZURE_ACR_NAME }}.azurecr.io \
              --registry-username $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query username -o tsv) \
              --registry-password $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query passwords[0].value -o tsv) \
              --ingress external \
              --target-port ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_PORT }}
          fi

      - name: Add Container API Java IPs to SQL Firewall
        run: |
          RG="${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }}"
          APP_NAME="${{ vars.INFRA_AZURE_CONTAINERAPP_BACKEND_NAME }}"
          SQL_SERVER="${{ vars.INFRA_AZURE_SQLSERVER_NAME }}"

          # Obtener las IPs de salida del Container App en formato JSON
          IPS=$(az containerapp show \
            --resource-group "$RG" \
            --name "$APP_NAME" \
            --query "properties.outboundIpAddresses" \
            -o tsv)

          # Iterar sobre las IPs
          TOTAL=$(echo "$IPS" | wc -w)
          INDEX=1
          for IP in $IPS; do
            NOMBREREGLA=$(printf "Rule_BACKEND_%03d" "$INDEX")
            INDEX_PAD=$(printf "%03d" "$INDEX")
            TOTAL_PAD=$(printf "%03d" "$TOTAL")

            if az sql server firewall-rule show \
                  --resource-group "$RG" \
                  --server "$SQL_SERVER" \
                  --name "$NOMBREREGLA" \
                  &>/dev/null; then
              echo "⚠️ [$INDEX_PAD/$TOTAL_PAD] Rule $NOMBREREGLA with IP $IP already exists. Skipping ..."
            else
              echo "✅ [$INDEX_PAD/$TOTAL_PAD] Creating rule $NOMBREREGLA with IP $IP ..."
              az sql server firewall-rule create \
                  --resource-group "$RG" \
                  --server "$SQL_SERVER" \
                  --name "$NOMBREREGLA" \
                  --start-ip-address "$IP" \
                  --end-ip-address "$IP"
            fi

            INDEX=$((INDEX+1))
          done

      - name: Add GitHub Actions IPs to SQL Firewall
        if: false  # Temporalmente deshabilitado mientras se prueba la opción de solo agregar la IP del runner, pues son más de 5000 rangos
        run: |
          RG="${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }}"
          SQL_SERVER="${{ vars.INFRA_AZURE_SQLSERVER_NAME }}"

          # Descargar el JSON de GitHub meta
          curl -s https://api.github.com/meta -o gh_meta.json

          # Extraer CIDRs de la sección "actions"
          CIDRS=$(jq -r '.actions[]' gh_meta.json)

          # Iterar sobre las IPs
          TOTAL=$(echo "$CIDRS" | wc -w)
          INDEX=1
          for CIDR in $CIDRS; do
            NOMBREREGLA=$(printf "Rule_GitHubActions_%04d" "$INDEX")
            INDEX_PAD=$(printf "%04d" "$INDEX")
            TOTAL_PAD=$(printf "%04d" "$TOTAL")

            START_IP=$(ipcalc -n $CIDR | awk -F= '/Network/ {print $2}')
            END_IP=$(ipcalc -b $CIDR | awk -F= '/Broadcast/ {print $2}')

            if az sql server firewall-rule show \
                  --resource-group "$RG" \
                  --server "$SQL_SERVER" \
                  --name "$NOMBREREGLA" \
                  &>/dev/null; then
              echo "⚠️ [$INDEX_PAD/$TOTAL_PAD] Rule $NOMBREREGLA with CIDR $CIDR already exists. Skipping ..."
            else
              echo "✅ [$INDEX_PAD/$TOTAL_PAD] Creating rule $NOMBREREGLA with IP $IP ..."
              az sql server firewall-rule create \
                  --resource-group "$RG" \
                  --server "$SQL_SERVER" \
                  --name "$NOMBREREGLA" \
                  --start-ip-address "$START_IP" \
                  --end-ip-address "$END_IP"
            fi

            INDEX=$((INDEX+1))
          done