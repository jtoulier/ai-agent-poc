name: Create Azure Infrastructure

on:
  workflow_dispatch:  # Solo se ejecutará a demanda. Si el recurso ya existe, no hará nada.


jobs:
  job-create-infra-azure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.INFRA_AZURE_SERVICE_PRINCIPAL_INFO }}

      - name: Create Resource Group if not exists
        run: |
          if az group show \
            --name ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "Resource group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} already exists."
          else
            echo "Creating resource group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} ..."
            az group create \
              --name ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --subscription ${{ vars.INFRA_AZURE_SUBSCRIPTION_ID }}
          fi

      - name: Create SQL Server if not exists
        run: |
          if az sql server show \
            --name ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "SQL Server ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} already exists."
          else
            echo "Creating SQL Server ..."
            az sql server create \
              --name ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --admin-user ${{ vars.INFRA_AZURE_SQLSERVER_ADMIN_LOGINNAME }} \
              --admin-password ${{ secrets.INFRA_AZURE_SQLSERVER_ADMIN_LOGINPASSWORD }}
          fi

      - name: Create SQL Database if not exists
        run: |
          if az sql db show \
            --name ${{ vars.INFRA_AZURE_SQLSERVER_DB_NAME }} \
            --server ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "SQL DB ${{ vars.INFRA_AZURE_SQLSERVER_DB_NAME }} already exists."
          else
            echo "Creating SQL Database ..."
            az sql db create \
              --name ${{ vars.INFRA_AZURE_SQLSERVER_DB_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --server ${{ vars.INFRA_AZURE_SQLSERVER_NAME }} \
              --edition GeneralPurpose \
              --compute-model Serverless \
              --family Gen5 \
              --capacity 2 \
              --min-capacity 0.5 \
              --max-size 5GB \
              --zone-redundant false
          fi

      - name: Create Azure Container Registry if not exists
        run: |
          if az acr show \
            --name ${{ vars.INFRA_AZURE_ACR_NAME }} \
            --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "ACR ${{ vars.INFRA_AZURE_ACR_NAME }} already exists."
          else
            echo "Creating ACR ..."
            az acr create \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --name ${{ vars.INFRA_AZURE_ACR_NAME }} \
              --sku Basic \
              --admin-enabled true
          fi

      - name: Create Log Analytics if not exists
        run: |
          if az monitor log-analytics workspace show \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} &>/dev/null; then
            echo "Log Analytics Workspace ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} already exists."
          else
            echo "Creating Log Analytics Workspace ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} ..."
            az monitor log-analytics workspace create \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }}
          fi
      
      - name: Create Container App Environment if not exists
        run: |
          if az containerapp env show \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} &>/dev/null; then
            echo "Container App Environment '${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }}' already exists."
          else
            echo "Creating Container App Environment '${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }}' ..."
            az containerapp env create \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} \
              --location ${{ vars.INFRA_AZURE_LOCATION }} \
              --logs-destination log-analytics \
              --logs-workspace-id  $(az monitor log-analytics workspace show \
                  --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
                  --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} \
                  --query customerId -o tsv) \
              --logs-workspace-key $(az monitor log-analytics workspace get-shared-keys \
                  --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
                  --workspace-name ${{ vars.INFRA_AZURE_LOGANALYTICSWORKSPACE_NAME }} \
                  --query primarySharedKey -o tsv)
          fi

      - name: Create API Java Container App if not exists
        run: |
          if az containerapp show \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_APIJAVA_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_APIJAVA_NAME }} already exists."
          else
            echo "Creating Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_APIJAVA_NAME }} ..."
            az containerapp create \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_APIJAVA_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --environment ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} \
              --image ${{ vars.INFRA_AZURE_ACR_NAME }}.azurecr.io/${{ vars.INFRA_APIJAVA_IMAGE_NAME }}:${{ vars.INFRA_APIJAVA_IMAGE_VERSION }} \
              --registry-server ${{ vars.INFRA_AZURE_ACR_NAME }}.azurecr.io \
              --registry-username $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query username -o tsv) \
              --registry-password $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query passwords[0].value -o tsv) \
              --ingress external \
              --target-port ${{ vars.INFRA_AZURE_CONTAINERAPP_APIJAVA_PORT }}
          fi

      - name: Create FrontEnd Container App if not exists
        run: |
          if az containerapp show \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} &>/dev/null; then
            echo "Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} already exists."
          else
            echo "Creating Container App ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} ..."
            az containerapp create \
              --name ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_NAME }} \
              --resource-group ${{ vars.INFRA_AZURE_RESOURCEGROUP_NAME }} \
              --environment ${{ vars.INFRA_AZURE_CONTAINERAPPENVIRONMENT_NAME }} \
              --image ${{ vars.INFRA_AZURE_ACR_NAME }}.azurecr.io/${{ vars.INFRA_FRONTEND_IMAGE_NAME }}:${{ vars.INFRA_FRONTEND_IMAGE_VERSION }} \
              --registry-server ${{ vars.INFRA_AZURE_ACR_NAME }}.azurecr.io \
              --registry-username $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query username -o tsv) \
              --registry-password $(az acr credential show -n ${{ vars.INFRA_AZURE_ACR_NAME }} --query passwords[0].value -o tsv) \
              --ingress external \
              --target-port ${{ vars.INFRA_AZURE_CONTAINERAPP_FRONTEND_PORT }}
          fi          